//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/VesselMoveContols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VesselMoveContols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VesselMoveContols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VesselMoveContols"",
    ""maps"": [
        {
            ""name"": ""Vessel"",
            ""id"": ""f0b6e4fe-ce29-4aff-ac96-62e729ad37b1"",
            ""actions"": [
                {
                    ""name"": ""LJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""16ae1799-1637-4daf-83ad-7fdd2e9634e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""d29473f8-4ee5-49a6-b996-4c6b17e1f9c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HoldTriggerR"",
                    ""type"": ""Button"",
                    ""id"": ""591a32f7-f024-491f-9f65-2c4dcc379769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2),Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressA"",
                    ""type"": ""Button"",
                    ""id"": ""fe99f3f1-8c1f-49c1-b97a-3a33e7006190"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54d43555-01c4-42e4-b906-0806736cf5fd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0918c717-f76d-454d-81b4-5a09dab3d6d0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4cc6575-84d1-4e89-9108-634be1c1c3fb"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldTriggerR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0fb8bc7-e9ba-4295-bd19-cce184809405"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Vessel
        m_Vessel = asset.FindActionMap("Vessel", throwIfNotFound: true);
        m_Vessel_LJoystick = m_Vessel.FindAction("LJoystick", throwIfNotFound: true);
        m_Vessel_RJoystick = m_Vessel.FindAction("RJoystick", throwIfNotFound: true);
        m_Vessel_HoldTriggerR = m_Vessel.FindAction("HoldTriggerR", throwIfNotFound: true);
        m_Vessel_PressA = m_Vessel.FindAction("PressA", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vessel
    private readonly InputActionMap m_Vessel;
    private IVesselActions m_VesselActionsCallbackInterface;
    private readonly InputAction m_Vessel_LJoystick;
    private readonly InputAction m_Vessel_RJoystick;
    private readonly InputAction m_Vessel_HoldTriggerR;
    private readonly InputAction m_Vessel_PressA;
    public struct VesselActions
    {
        private @VesselMoveContols m_Wrapper;
        public VesselActions(@VesselMoveContols wrapper) { m_Wrapper = wrapper; }
        public InputAction @LJoystick => m_Wrapper.m_Vessel_LJoystick;
        public InputAction @RJoystick => m_Wrapper.m_Vessel_RJoystick;
        public InputAction @HoldTriggerR => m_Wrapper.m_Vessel_HoldTriggerR;
        public InputAction @PressA => m_Wrapper.m_Vessel_PressA;
        public InputActionMap Get() { return m_Wrapper.m_Vessel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VesselActions set) { return set.Get(); }
        public void SetCallbacks(IVesselActions instance)
        {
            if (m_Wrapper.m_VesselActionsCallbackInterface != null)
            {
                @LJoystick.started -= m_Wrapper.m_VesselActionsCallbackInterface.OnLJoystick;
                @LJoystick.performed -= m_Wrapper.m_VesselActionsCallbackInterface.OnLJoystick;
                @LJoystick.canceled -= m_Wrapper.m_VesselActionsCallbackInterface.OnLJoystick;
                @RJoystick.started -= m_Wrapper.m_VesselActionsCallbackInterface.OnRJoystick;
                @RJoystick.performed -= m_Wrapper.m_VesselActionsCallbackInterface.OnRJoystick;
                @RJoystick.canceled -= m_Wrapper.m_VesselActionsCallbackInterface.OnRJoystick;
                @HoldTriggerR.started -= m_Wrapper.m_VesselActionsCallbackInterface.OnHoldTriggerR;
                @HoldTriggerR.performed -= m_Wrapper.m_VesselActionsCallbackInterface.OnHoldTriggerR;
                @HoldTriggerR.canceled -= m_Wrapper.m_VesselActionsCallbackInterface.OnHoldTriggerR;
                @PressA.started -= m_Wrapper.m_VesselActionsCallbackInterface.OnPressA;
                @PressA.performed -= m_Wrapper.m_VesselActionsCallbackInterface.OnPressA;
                @PressA.canceled -= m_Wrapper.m_VesselActionsCallbackInterface.OnPressA;
            }
            m_Wrapper.m_VesselActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LJoystick.started += instance.OnLJoystick;
                @LJoystick.performed += instance.OnLJoystick;
                @LJoystick.canceled += instance.OnLJoystick;
                @RJoystick.started += instance.OnRJoystick;
                @RJoystick.performed += instance.OnRJoystick;
                @RJoystick.canceled += instance.OnRJoystick;
                @HoldTriggerR.started += instance.OnHoldTriggerR;
                @HoldTriggerR.performed += instance.OnHoldTriggerR;
                @HoldTriggerR.canceled += instance.OnHoldTriggerR;
                @PressA.started += instance.OnPressA;
                @PressA.performed += instance.OnPressA;
                @PressA.canceled += instance.OnPressA;
            }
        }
    }
    public VesselActions @Vessel => new VesselActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IVesselActions
    {
        void OnLJoystick(InputAction.CallbackContext context);
        void OnRJoystick(InputAction.CallbackContext context);
        void OnHoldTriggerR(InputAction.CallbackContext context);
        void OnPressA(InputAction.CallbackContext context);
    }
}
